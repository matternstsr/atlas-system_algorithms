#include <stdlib.h>
#include "huffman.h"

/**
* binary_tree_node_create - Creates a binary tree node.
* @data: The data to store in the node.
* Return: A pointer to the newly created node.
*/
binary_tree_node_t *binary_tree_node_create(void *data)
{
    binary_tree_node_t *node = malloc(sizeof(binary_tree_node_t));

    if (!node)
        return (NULL);

    node->data = data;
    node->left = NULL;
    node->right = NULL;

    return (node);
}

/**
* heap_destroy - Destroys the heap and frees all memory.
* @heap: The heap to destroy.
*/
void heap_destroy(heap_t *heap)
{
    if (!heap)
        return;
    for (size_t i = 0; i < heap->size; i++)
    {
        binary_tree_node_t *node = heap->array[i];
        if (node)
        {
            if (node->data)
                free(node->data);
            free(node);
        }
    }
    free(heap->array);
    free(heap);
}